<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Day.3 「建構網頁的基石！」 —— 使用網頁標籤</title>
    <link href="/2021/09/12/2021-9-12-it_ironman-day3/"/>
    <url>/2021/09/12/2021-9-12-it_ironman-day3/</url>
    
    <content type="html"><![CDATA[<h1 id="Day-3-「建構網頁的基石！」-——-使用網頁標籤"><a href="#Day-3-「建構網頁的基石！」-——-使用網頁標籤" class="headerlink" title="Day.3 「建構網頁的基石！」 —— 使用網頁標籤"></a>Day.3 「建構網頁的基石！」 —— 使用網頁標籤</h1><p><img src="https://i.imgur.com/G3Fh3cl.jpg" alt="樂高"></p><p>我們前面已經稍微認識了網頁的架構了，就像樂高一塊一塊堆疊起來，前一篇已經介紹的就不多贅述了。</p><p>雖然會最基礎的<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>標籤就能夠開始切版了，甚至只靠<code>&lt;div&gt;</code>搭配 CSS 就能做出各種 tag 的效果，但為了良好的 SEO 與 <strong>閱讀性</strong>，也為了以後不會把別人<del>自己</del>逼瘋 (?，還是會建議用更適合的標籤來完成網頁。</p><!-- more --><blockquote><p>什麼是 SEO？ 是 Search Engine Optimization 的縮寫，中文翻譯為搜尋引擎最佳化。<br>簡單解釋就是，好的 SEO 等於讓搜尋引擎在茫茫網路大海中，讓你更容易被搜尋到。</p></blockquote><p>根據 80/20 法則，其實學會 2 成的標籤，就已經能好好建構出不錯的網頁了，一些不常用的標籤，倒也不用硬是死記，需要用時再 Google 就好 (<del>也許根本用不到</del>。</p><h2 id="常用的標籤"><a href="#常用的標籤" class="headerlink" title="常用的標籤"></a>常用的標籤</h2><h3 id="用來表示地盤的標籤"><a href="#用來表示地盤的標籤" class="headerlink" title="用來表示地盤的標籤"></a>用來表示地盤的標籤</h3><p>這種標籤最主要是用來劃分區域的標籤，通常會有子元素。</p><ul><li><p><code>&lt;div&gt;</code> 沒有語意的標籤，也是最常使用的標籤</p></li><li><p><code>&lt;header&gt;</code> 代表容器的頭部</p></li><li><p><code>&lt;main&gt;</code> 代表容器主要內容</p></li><li><p><code>&lt;footer&gt;</code> 代表容器的底部</p></li><li><p><code>&lt;secition&gt;</code> 代表一個段落</p></li><li><p><code>&lt;nav&gt;</code> 代表導航列</p></li></ul><p><img src="https://i.imgur.com/HesZUPB.png" alt="iT ironman"><br><em>如圖紅色框使用的是 <code>&lt;nav&gt;</code>，黃色使用的是 <code>&lt;hander&gt;</code></em></p><p><strong>注意</strong> 這邊是用容器，代表<code>&lt;header&gt;</code>不一定要放在整個網頁的最上面<br>也可以用<code>&lt;main&gt;</code>包住，代表主要內容的頭部。</p><h3 id="給文字（text）使用的標籤"><a href="#給文字（text）使用的標籤" class="headerlink" title="給文字（text）使用的標籤"></a>給文字（text）使用的標籤</h3><ul><li><p><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 內文的標題，數字 1 代表第一重要標題，依序往下推，最小標題為<code>&lt;h6&gt;</code>，會<strong>影響 SEO</strong>，一個網頁建議只要有<strong>一個</strong><code>&lt;h1&gt;</code>標籤</p></li><li><p><code>&lt;p&gt;</code> &amp; <code>&lt;pre&gt;</code> 內文區塊標籤，<code>&lt;pre&gt;</code>會保留格式，<code>&lt;p&gt;</code>則不會</p></li><li><p><code>&lt;span&gt;</code> 同樣沒有語意，主要是要在區塊元素內套用不同 CSS 的標記標籤</p></li><li><p><code>&lt;a&gt;</code> 能夠超連結外部網站（href=”網址”）、進行錨點傳送（href=”#id_name”）、進行網路電話（href=”tel:電話號碼”）或電子信箱（href=”mailto:電子信箱”）<br><strong>注意</strong> <code>&lt;a&gt;</code>標籤內不能再嵌套<code>&lt;a&gt;</code>標籤。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.google.com.tw/&quot;</span>&gt;</span>Google 超連結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>進行錨點傳送至頂<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:+886-987654321&quot;</span>&gt;</span>進行網路電話<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:email@gmail.com&quot;</span>&gt;</span>寄信給電子信箱<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><a href="https://www.google.com.tw/">Google 超連結</a><br><a href="#">進行錨點傳送至頂</a><br><a href="tel:+886-987654321">進行網路電話</a><br><a href="mailto:email@gmail.com">寄信給電子信箱</a></p><h3 id="關於圖片（image）的標籤"><a href="#關於圖片（image）的標籤" class="headerlink" title="關於圖片（image）的標籤"></a>關於圖片（image）的標籤</h3><ul><li><p><code>&lt;img&gt;</code> 圖片標籤 <code>src=&quot;圖片網址&quot; alt=&quot;圖片說明文字&quot;</code>。<br><strong>注意</strong> <code>alt</code> 必須填寫，當圖片檔失效，會顯示說明文字，此外還會提供給視障人士聽到圖片說明。</p></li><li><p><code>&lt;figure&gt;</code> 這也算佔領地盤的標籤，代表放圖片的<strong>區域</strong>，子元素可以多個<code>&lt;img&gt;</code></p></li><li><p><code>&lt;figcaption&gt;</code> 代表圖片區域的文字介紹，可以讓瀏覽器知道這段文字與這個圖片區域有關聯。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/THgsIlG.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>Hello image<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://i.imgur.com/THgsIlG.jpg" alt="hello"><br>Hello image</p><h3 id="好用的列表（list）標籤"><a href="#好用的列表（list）標籤" class="headerlink" title="好用的列表（list）標籤"></a>好用的列表（list）標籤</h3><ul><li><p><code>&lt;ul&gt;</code> 用來設定<strong>無序</strong>列表</p></li><li><p><code>&lt;ol&gt;</code> 用來設定<strong>有序</strong>列表</p></li><li><p><code>&lt;li&gt;</code> 需與<code>&lt;ul&gt;</code>或<code>&lt;ol&gt;</code>搭配，用來設定列表項目</p></li></ul><p><strong>常見</strong> 的使用時機，像導航條那樣，同一個內容排列的時候就很適合使用！<br><img src="https://i.imgur.com/ll8OSOq.png" alt="導航條"><br><em>如圖綠色框為 <code>&lt;ul&gt;</code>，紅色框為 <code>&lt;li&gt;</code></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是無序列表 代號蘋果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是無序列表 代號橘子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是有序列表 代號小辣椒<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是有序列表 代號老薑<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>我是無序列表 代號蘋果</li><li>我是無序列表 代號橘子</li></ul><ol><li>我是有序列表 代號小辣椒</li><li>我是有序列表 代號老薑</li></ol><h3 id="製作表格用的表格（table）標籤"><a href="#製作表格用的表格（table）標籤" class="headerlink" title="製作表格用的表格（table）標籤"></a>製作表格用的表格（table）標籤</h3><ul><li><p><code>&lt;table&gt;</code> 用來設定表格</p></li><li><p><code>&lt;tr&gt;</code> 用來設定一列（row）</p></li><li><p><code>&lt;th&gt;</code> 需與<code>&lt;tr&gt;</code>搭配，表示表格標題（column）</p></li><li><p><code>&lt;td&gt;</code> 需與<code>&lt;tr&gt;</code>搭配，表示表格內容（column）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>我是表格標題 報數 第一班 班頭<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>我是表格標題 報數 第二班 班頭<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>我是表格標題 報數 第三班 班頭<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我是表格內容 報數 第一班 2 號<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我是表格內容 報數 第二班 2 號<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我是表格內容 報數 第三班 2 號<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>我是表格標題 報數 第一班 班頭</th><th>我是表格標題 報數 第二班 班頭</th><th>我是表格標題 報數 第三班 班頭</th></tr></thead><tbody><tr><td>我是表格內容 報數 第一班 2 號</td><td>我是表格內容 報數 第二班 2 號</td><td>我是表格內容 報數 第三班 2 號</td></tr></tbody></table><h3 id="必學的表單（form）標籤"><a href="#必學的表單（form）標籤" class="headerlink" title="必學的表單（form）標籤"></a>必學的表單（form）標籤</h3><ul><li><p><code>&lt;form&gt;</code> 想要把資料傳給後端，就需要依靠<code>&lt;form&gt;</code>標籤</p></li><li><p><code>&lt;label&gt;</code> 表單說明標籤，這個是配合<code>&lt;input&gt;</code>標籤，利用屬性<code>for=&quot;id_name&quot;</code>鎖定<code>&lt;input id=&quot;id_name&quot;&gt;</code></p></li><li><p><code>&lt;input&gt;</code> 單行輸入標籤，這個標籤本身自閉合，本身<code>type</code>有很多屬性值。</p><ul><li><code>type = &quot;text&quot;</code>，輸入文字</li><li><code>type = &quot;password&quot;</code>，輸入的文字會屏蔽</li><li><code>type = &quot;email&quot;</code>，輸入信箱，會自動驗證格式是否正確</li><li><code>type = &quot;number&quot;</code>，只能輸入數字</li><li><code>type = &quot;radio&quot;</code>，只能單選，要添加<code>name</code>屬性，來判斷範圍</li><li><code>type = &quot;checkbox&quot;</code>，可以複選，要添加<code>name</code>屬性，來判斷範圍</li><li><code>type = &quot;button&quot;</code>，就普通的按鈕</li><li><code>type = &quot;submit&quot;</code>，能發送表單的按鈕</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>請選擇性別<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>請選擇你擁有的技能<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;skill&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;skill&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;skill&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>Javascript<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/iijkuTY.png" alt="form - input"></p><ul><li><p><code>&lt;textarea&gt;</code>，多行輸入標籤，需要閉合標籤，需要使用<code>row</code>和<code>col</code>屬性，來決定大小</p></li><li><p><code>&lt;select&gt;</code>，下拉式選單</p></li><li><p><code>&lt;option&gt;</code>，下拉式選單的選項</p></li><li><p><code>&lt;optgroup&gt;</code>，下拉式選單的預設顯示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>請選擇疫苗<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>AZ 疫苗<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>莫德納疫苗<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>高端疫苗<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2a8naoL.png" alt="form - select"></p><h3 id="進階的嵌入用標籤"><a href="#進階的嵌入用標籤" class="headerlink" title="進階的嵌入用標籤"></a>進階的嵌入用標籤</h3><ul><li><code>&lt;ifram&gt;</code> 用來內嵌網頁，如：Google 地圖、Code pen</li><li><code>&lt;video&gt;</code> 用來內嵌影片檔</li><li><code>&lt;audio&gt;</code> 用來內嵌音樂檔</li><li><code>&lt;canvas&gt;</code> 用來實現繪圖、遊戲具互動性的標籤</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>雖然 HTML 很簡單，但標籤真的又臭又多，這只是冰山一角，還有很多屬性沒介紹，但前期這樣也很夠用了，下一篇將進入我們的 CSS 篇章！</p>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>iT 鐵人賽</category>
      
      <category>第 2021 年</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iT 鐵人賽</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day.2 「歡迎來到網頁這個世界！」 —— 認識網頁架構</title>
    <link href="/2021/09/11/2021-9-11-it_ironman-day2/"/>
    <url>/2021/09/11/2021-9-11-it_ironman-day2/</url>
    
    <content type="html"><![CDATA[<h1 id="Day-2-「歡迎來到網頁這個世界！」-——-認識網頁架構"><a href="#Day-2-「歡迎來到網頁這個世界！」-——-認識網頁架構" class="headerlink" title="Day.2 「歡迎來到網頁這個世界！」 —— 認識網頁架構"></a>Day.2 「歡迎來到網頁這個世界！」 —— 認識網頁架構</h1><p><img src="https://i.imgur.com/QwHIOe0.jpg" alt="network work"></p><h2 id="網頁世界是由什麼組成？"><a href="#網頁世界是由什麼組成？" class="headerlink" title="網頁世界是由什麼組成？"></a>網頁世界是由什麼組成？</h2><p>上一篇有講到網頁三兄弟，其中有一個老大哥負責撐起這個世界，那就是 HTML ，少了 HTML 這個根基，就不會有網頁。<br>只有 HTML 的世界是非常無聊的，這時 CSS 和 Javascript 接連出現，為網頁世界創造更多的可能！</p><!-- more --><ul><li>HTML 負責撐起網頁</li><li>CSS 負責為網頁增添色彩</li><li>Javascript 負責為網頁增加互動性</li></ul><h2 id="認識-HTML"><a href="#認識-HTML" class="headerlink" title="認識 HTML"></a>認識 HTML</h2><h3 id="HTML-是什麼？"><a href="#HTML-是什麼？" class="headerlink" title="HTML 是什麼？"></a>HTML 是什麼？</h3><p>HTML 是 Hyper Text Markup Language 的縮寫，中文翻譯為<strong>超文本標示語言</strong>，是樣板語言。</p><blockquote><p>什麼是樣板語言？ 主要給樣板處理器（瀏覽器）產生畫面的語言</p></blockquote><h3 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h3><p>HTML 的世界是由上往下建構的，最後會變成一個 DOM tree 樹狀圖。</p><blockquote><p>什麼是 DOM？　DOM 是 Document Object Model 的縮寫，中文翻譯為<strong>文件物件模型</strong></p></blockquote><p><img src="https://i.imgur.com/pkhQ83z.png" alt="HTML"><br>轉換成 樹狀圖架構<br><img src="https://i.imgur.com/zWx3NJn.png" alt="DOM tree"></p><ul><li>紅色框是 HTML5 的檔案聲明，用來告訴瀏覽器這個文件是什麼類型。</li><li>橙色框是最根部的標籤，用來標記網頁所使用的語言，如：<code>en</code> 為英文，<code>zh-TW</code> 為繁體中文。</li><li>黃色框是要給瀏覽器看的設定，不會顯示在網頁上。<ul><li><code>&lt;meta&gt;</code>是給瀏覽器看的設定值，如：字元編碼、RWD、網頁 icon 、網頁描述…等。</li><li><code>&lt;title&gt;</code>是給網頁的標題。</li><li><code>&lt;link&gt;</code>是用來引入 CSS 的。</li><li><code>&lt;script&gt;</code>用來引入 Javascript 使用的，但大多數人會設在網頁尾端，之後再講為什麼。</li></ul></li><li>綠色框是網頁的主要內容呈現。</li><li>藍色框是標籤的屬性。</li><li>樹狀圖具有上下關係，如：<code>&lt;body&gt;</code>子元素為<code>&lt;h1&gt;</code>、<code>&lt;h1&gt;</code>父元素為<code>&lt;body&gt;</code>。</li><li>父元素可以有多個子元素，子元素只有一個父元素。</li></ul><h3 id="標籤"><a href="#標籤" class="headerlink" title="標籤"></a>標籤</h3><p><img src="https://i.imgur.com/AS6R8dd.png" alt="h1 tag"></p><ul><li>深藍色字是標籤名稱</li><li>淺藍色字是屬性名稱</li><li>橘色字是屬性值</li><li>白色字是文本</li><li>大多數標籤都要使用結束標籤做結尾，如：<code>&lt;/h1&gt;</code></li></ul><h2 id="HTML-是怎麼呈現的？"><a href="#HTML-是怎麼呈現的？" class="headerlink" title="HTML 是怎麼呈現的？"></a>HTML 是怎麼呈現的？</h2><p>最原始的 HTML 是沒有所謂的區塊元素，而是各家的瀏覽器自己設定預設的樣式，讓 HTML 更加容易閱讀。</p><p><img src="https://i.imgur.com/PnXC70n.png" alt="h1 tag"><br><em>如圖 <code>&lt;h1&gt;</code> Google Chrome 內建樣式</em></p><p>雖然各家瀏覽器的樣式都不太一樣，但整體大方向還是一樣的，都有區分出區塊元素與行內元素。<br>多數情況下，會用區塊元素劃分位置，行內元素會放在區塊元素內。</p><ul><li>區塊元素（block）：在沒有使用 CSS ，會包覆著子元素蓋一整行，如：<code>div</code>、<code>h1</code>、<code>ul</code>…等。</li><li>行內元素（inline）：可以多個行內並排，直到排不下就會往下推擠，如：<code>span</code>、<code>img</code>、<code>input</code>…等。</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="HTML - block &amp; inline" src="https://codepen.io/vsfvjiuv-the-typescripter/embed/PojpZzZ?default-tab=html%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/vsfvjiuv-the-typescripter/pen/PojpZzZ">  HTML - block &amp; inline</a> by Johnson Mao (<a href="https://codepen.io/vsfvjiuv-the-typescripter">@vsfvjiuv-the-typescripter</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>*為了更好的呈現效果，所以有稍微添加一些 CSS*<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>現在已經初步認識網頁的架構了，明天將會深入了解各個標籤的用法與注意事項。<br>如果想自己做出樹狀圖，可以玩玩看，只是架構有點麻煩。</p><iframe height="300" style="width: 100%;" scrolling="no" title="DOM tree" src="https://codepen.io/vsfvjiuv-the-typescripter/embed/PojpLeg?default-tab=html%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/vsfvjiuv-the-typescripter/pen/PojpLeg">  DOM tree</a> by Johnson Mao (<a href="https://codepen.io/vsfvjiuv-the-typescripter">@vsfvjiuv-the-typescripter</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>iT 鐵人賽</category>
      
      <category>第 2021 年</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iT 鐵人賽</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day.1 「工欲善其事，必先利其器！」—— 前言 與 介紹工具</title>
    <link href="/2021/09/10/2021-9-10-it_ironman-day1/"/>
    <url>/2021/09/10/2021-9-10-it_ironman-day1/</url>
    
    <content type="html"><![CDATA[<h1 id="Day-1-「工欲善其事，必先利其器！」——-前言-與-介紹工具"><a href="#Day-1-「工欲善其事，必先利其器！」——-前言-與-介紹工具" class="headerlink" title="Day.1 「工欲善其事，必先利其器！」—— 前言 與 介紹工具"></a>Day.1 「工欲善其事，必先利其器！」—— 前言 與 介紹工具</h1><p><img src="https://i.imgur.com/eDkVQpQ.jpg" alt="Everyone can code"></p><h2 id="大家好"><a href="#大家好" class="headerlink" title="大家好"></a>大家好</h2><p>我是毛毛，因為這波疫情影響下，讓我多了許多時間可以好好投資自己，想把自己目前所學的技能，轉化成能夠讓更多人更好吸收的知識，如果有發現內容有誤，也請您不吝指教，感謝。</p><!-- more --><h2 id="這個系列"><a href="#這個系列" class="headerlink" title="這個系列"></a>這個系列</h2><p>關於這個系列，會盡量著重在使用簡單好懂的解說，介紹網頁三兄弟（ HTML 、 CSS 、 Javascript ），希望在編寫的同時，回顧自己是否確實搞懂，正所謂最好的學習方式除了輸入，還要懂得輸出。</p><h2 id="使用的編輯器"><a href="#使用的編輯器" class="headerlink" title="使用的編輯器"></a>使用的編輯器</h2><p>我會推薦使用 VS Code 編輯器，因為他非常適合開發 HTML 、 CSS 、 Javascript，而且套件、社群也已經相當成熟了，對於新手來說，非常容易入門。<br><a href="https://code.visualstudio.com/download">VS Code 下載官網</a></p><h3 id="善用套件，事半功倍"><a href="#善用套件，事半功倍" class="headerlink" title="善用套件，事半功倍"></a>善用套件，事半功倍</h3><p>VS Code 有相當多個套件可以使用，這裡先介紹常用的套件，當然還有許多套件值得你慢慢尋找。</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hant">Chinese (Traditional) Language Pack for Visual Studio Code</a><br>  習慣看中文介面？ 這個套件可以把 VS Code 轉成繁體中文版。</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow">indent-rainbow</a><br>  縮排不知縮到哪去？ 幫縮排添加顏色，讓程式碼更加容易閱讀。</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a><br>  在寫 Javascript 漏打一個括弧而找得很辛苦？ 這個套件幫你把對應的括弧上相同顏色。</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a><br>  開發網站想看網站的呈現？ 這個套件可以幫你及時更新畫面，不用一直按 F5。</p></li></ul><h3 id="善用快捷鍵，時間就是金錢"><a href="#善用快捷鍵，時間就是金錢" class="headerlink" title="善用快捷鍵，時間就是金錢"></a>善用快捷鍵，時間就是金錢</h3><p>將雙手盡量停留在鍵盤上，能更有效提升寫 code 的效率，這裡先介紹我常用的快捷鍵。<br>此篇以 Windows 操作，如果是 Mac 可能會有些許不一樣<br>Mac 需把 <code>Ctrl</code> 換成 <code>Cmd ⌘</code></p><ul><li><p>VS Code 非常貼心，本身就內建 HTML 、 CSS 、Javascript 的 Emmet，只要輸入縮寫語法，按下 Tab 或 Enter 就能擴充縮寫來快速編寫。需注意縮寫語法取決於副檔名。<br><img src="https://i.imgur.com/Vi5ZXGn.gif" alt="縮寫語法"><br><em>此圖範例為，新增檔案切換成 HTML 副檔名，並使用 HTML emmet</em></p></li><li><p><code>Ctrl</code> + <code>D</code> 可以同字串選取。<br><img src="https://i.imgur.com/zWquMNw.gif" alt="同字串選取"><br><em>此圖範例為，選取 MyNavLink 換成 NavLink</em></p></li><li><p>還在整段<code>Ctrl</code> + <code>C</code> + <code>Ctrl</code> + <code>V</code>，複製程式碼嗎？可以嘗試看看使用一個<code>Shift</code> + <code>Alt</code> + <code>上或下</code>來複製程式碼<br><img src="https://i.imgur.com/Li08fjb.gif" alt="Shift + Alt + 上或下來複製程式碼"><br><em>此圖範例為，把整個<code>&lt;ul&gt;</code>格式複製貼上</em></p></li><li><p>使用<code>Shift</code> + <code>Alt</code> + <code>F</code>，就能快速為程式碼進行 Format 排版<br><img src="https://i.imgur.com/lJDcUXS.gif" alt="快速為程式碼進行 Format 排版"><br><em>此圖範例為，使用<code>Shift</code> + <code>Alt</code> + <code>F</code>進行快速排版</em></p></li><li><p>別再左側資料夾慢慢找檔案，善用<code>Ctrl</code> + <code>E</code>或<code>Ctrl</code> + <code>P</code>搜尋檔案，就可以直接切換檔案<br><img src="https://i.imgur.com/jHQoBOG.gif" alt="Ctrl + P 搜尋檔案，就可以直接切換檔案"><br><em>此圖範例為，快速導覽至 Nav.jsx</em></p></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這是我個人常用的套件工具與快捷鍵，準備好我們的工具，接下來就要進入我們的網頁篇～<br>也歡迎大家在下面留言補充更多好玩好用的套件～</p>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>工具</category>
      
      <category>VS Code</category>
      
      <category>iT 鐵人賽</category>
      
      <category>第 2021 年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iT 鐵人賽</tag>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2021/09/06/2021-9-6-mongodb/"/>
    <url>/2021/09/06/2021-9-6-mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在製作自己的專案時，想讓專案更加完整，於是就開始想，既然前端畫面邏輯都自己開發了，現在網路上資源又那麼豐富，未來也有可能朝全端發展，何不自己架設後端 API，給自己串接，還能了解整個網頁的運作邏輯，於是開始自學了後端框架 Express 和資料庫 MongoDB，這裡將會記錄學習 MongoDB 的學習筆記。</p><!-- more --><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><h3 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h3><ul><li>關聯式資料庫（RDBMS）<ul><li>資料具有關聯性</li><li>表格化、標準化</li><li>如：MySQL</li></ul></li><li>非關聯式資料庫（Not only SQL）<ul><li>更加彈性化（不一定要使用 SQL）</li><li>如：MongoDB</li></ul></li><li>SQL 是什麼？<ul><li>SQL 是<strong>結構化查詢語言</strong></li><li>所有的關聯式資料庫都是用 SQL</li><li>會 SQL 就大致上能快速學會關聯式資料庫（每個資料庫還是有些微的不同）</li></ul></li></ul><h3 id="MongoDB-1"><a href="#MongoDB-1" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul><li>是快速開發 Web 而設計的資料庫</li><li>極簡、靈活性高</li><li>存取的是各式各樣的 BSON。</li><li>BSON 就是二進制的 JSON。</li><li>MongodDB 架構 可以有多個資料庫<ul><li>database 為資料庫，存放多個集合<ul><li>collection 集合，存放多個文件<ul><li>document 文件，我們操作的部分</li></ul></li></ul></li></ul></li></ul><h2 id="MongoDB-安裝-與-啟動"><a href="#MongoDB-安裝-與-啟動" class="headerlink" title="MongoDB 安裝 與 啟動"></a>MongoDB 安裝 與 啟動</h2><h3 id="安裝-MongoDB"><a href="#安裝-MongoDB" class="headerlink" title="安裝 MongoDB"></a>安裝 MongoDB</h3><p>可以去官網依自己的作業系統下載。<br>建議安裝版本為偶數結尾（穩定版）。<br><a href="https://docs.mongodb.com/manual/administration/install-community/">官網下載網站</a></p><p>==注意==：安裝建議用使用預設的比較不容易出錯，自訂的話，路徑不能有中文。</p><h3 id="設置環境變數"><a href="#設置環境變數" class="headerlink" title="設置環境變數"></a>設置環境變數</h3><p>我這裡是安裝 Windows 的 MongoDB 5.0 版本</p><ol><li><p>找到安裝 MongoDB 的資料夾，直到找到裡面的 bin 資料夾<br> 範例：<code>C:\Program Files\MongoDB\Server\5.0\bin</code></p></li><li><p>開啟電腦的環境變數，對使用者變數裡面的 PATH 編輯，並把剛剛 bin 的路徑新增到 PATH 內（需注意不要動到裡面其他的路徑）<br> 以我 Windows 10 為例：<br> 打開我的電腦 &gt; 開啟設定 &gt; 開啟進階系統設定 &gt; 系統內容進階 tag 內點環境變數 &gt; 對 PATH 進行編輯</p></li><li><p>在 C:\ 根目錄新增 data 資料夾，裡面新增 db 資料夾。</p></li><li><p>開啟 CMD 輸入 <code>Mongod</code> 啟動服務器後縮小</p></li><li><p>再開啟另一個 CMD 輸入 <code>Mongo</code> 連接資料庫，連接成功 CMD 會出現 <code>&gt;</code></p></li></ol><h3 id="開機自動啟動服務器"><a href="#開機自動啟動服務器" class="headerlink" title="開機自動啟動服務器"></a>開機自動啟動服務器</h3><ol><li><p>在 MongoDB 版本那個資料夾新增<code>mongod.cfg</code>檔案<br> 如：<code>C:\Program Files\MongoDB\Server\5.0</code>新增<code>mongod.cfg</code></p></li><li><p>在<code>mongod.cfg</code>內輸入設定</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cfg">systemLog:<br>    destination: file<br>    path: c:\data\log\mongod.log   # 這裡輸入 log 檔案<br>storage:<br>    dbPath: c:\data\db   # 這裡輸入資料要存的位置<br>net:<br>    port: 27017   # 這裡輸入想要的 port 號<br></code></pre></td></tr></table></figure></li><li><p>開啟系統管理員身分的 CMD 在 <strong>bin 資料夾</strong> 輸入 <code>mongod.exe --config</code></p></li><li><p>在 <strong>資料存取位置</strong> 輸入 <code>god.cfg --install</code></p></li><li><p>接著輸入 <code>net start MongoDB</code> 啟動服務器</p></li></ol><h2 id="圖形化工具安裝"><a href="#圖形化工具安裝" class="headerlink" title="圖形化工具安裝"></a>圖形化工具安裝</h2><p>除了使用 CMD 來操作 MongoDB 外，也有圖形化工具可以使用<br><a href="https://www.mongodbmanager.com/download">下載圖形化工具網站</a></p><h2 id="操作資料庫"><a href="#操作資料庫" class="headerlink" title="操作資料庫"></a>操作資料庫</h2><p>使用 <code>use &lt;database&gt;</code> 新增並進入資料庫<br>如：<code>use test</code></p><p>當你新增資料時，<code>&lt;collection&gt;</code>為你的集合名。<br>如：<code>db.students.insert(&#123; name: &quot;毛毛&quot;, gender: &quot;男&quot;&#125;)</code><br>這時資料庫就會自動新增 students 這個集合，<br>這個集合裡面有個<code>&#123; name: &quot;毛毛&quot;, gender: &quot;男&quot;&#125;</code>的資料，<br>輸入<code>show collection</code> 就可以看到 students<br>輸入<code>show dbs</code>就可以看到資料庫名稱 test</p><p>想刪除集合，只要輸入<code>db.students.drop()</code>就會刪除集合。<br>想刪除當前所在的資料庫，只要輸入<code>db.dropDatabase()</code></p><h3 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h3><p><code>db.&lt;collection&gt;.insert(資料)</code><br>可以新增 JSON 資料，一個資料傳物件，多個資料傳陣列。<br>新增後如果沒有自訂<code>_id</code>值的話，MongoDB 會自動生成 <code>_id</code>，確保每個資料都是唯一性。</p><p><code>db.&lt;collection&gt;.insertOne()</code> 只能傳一個物件。<br><code>db.&lt;collection&gt;.insertMany()</code> 只能傳一個陣列。</p><h3 id="查詢資料"><a href="#查詢資料" class="headerlink" title="查詢資料"></a>查詢資料</h3><p><code>db.&lt;collection&gt;.find(條件)</code><br>可以傳物件，當作查詢集合的參考，返回陣列。<br>如：傳<code>&#123;&#125;</code>就會顯示所有資料</p><p><code>db.&lt;collection&gt;.findOne()</code> 返回第一個查到的物件。<br><code>db.&lt;collection&gt;.find().count()</code> 返回查詢的數量。（length()一樣）</p><h4 id="如果想加入條件"><a href="#如果想加入條件" class="headerlink" title="如果想加入條件"></a><strong>如果想加入條件</strong></h4><p>假設想查詢 price &gt; 100 的資料，條件加上 <code>$gt</code><br>範例：<code>db.&lt;collection&gt;.find(&#123;price: &#123;$gt: 100&#125; &#125;)</code><br>假設想查詢 price &gt;= 100 的資料，條件加上 <code>$gte</code><br>範例：<code>db.&lt;collection&gt;.find(&#123;price: &#123;$gte: 100&#125; &#125;)</code><br>假設想查詢 price &lt; 100 的資料，條件加上 <code>$lt</code><br>範例：<code>db.&lt;collection&gt;.find(&#123;price: &#123;$lt: 100&#125; &#125;)</code><br>假設想查詢 90 &lt; price &lt; 100 的資料，條件之間加上<code>,</code><br>範例：<code>db.&lt;collection&gt;.find(&#123;price: &#123;$lt: 100, $gt: 90&#125; &#125;)</code><br>假設想查詢前 10 筆資料，使用 <code>limit(數量)</code><br>範例：<code>db.&lt;collection&gt;.find().limit(10)</code><br>假設想查詢第 11 ~ 20 筆資料，使用 <code>limit(數量)</code>外，還要使用<code>skip(跳過幾筆)</code><br>範例：<code>db.&lt;collection&gt;.find().skip(10).limit(10)</code></p><h3 id="更新資料"><a href="#更新資料" class="headerlink" title="更新資料"></a>更新資料</h3><p><code>db.&lt;collection&gt;.update(查詢條件, 更新資料)</code><br>透過第一個參數查詢到第一筆資料，第二個參數默認情況下會直接取代原有資料。</p><h4 id="修改資料"><a href="#修改資料" class="headerlink" title="修改資料"></a>修改資料</h4><p><code>db.&lt;collection&gt;.update(查詢條件, &#123; $set: &#123;更新資料&#125; &#125;)</code><br>第二個參數增加 $set 修改操作符，就可以合併資料，而不是取代。</p><p><code>db.&lt;collection&gt;.update(查詢條件, &#123; $unset: &#123;刪除資料&#125; &#125;)</code><br>第二個參數改成 $unset 修改操作符，就可以把資料指定屬性刪除。</p><h4 id="修改多筆資料"><a href="#修改多筆資料" class="headerlink" title="修改多筆資料"></a>修改多筆資料</h4><p><code>db.&lt;collection&gt;.updateMany()</code><br>update 默認情況只會修改一個資料，可以使用 updateMany 同時修改多筆資料。</p><p><code>db.&lt;collection&gt;.update(查詢條件, &#123; $set: &#123;更新資料&#125; &#125;, &#123; multi: true &#125;)</code><br>透過傳入第三個參數<code>&#123; multi: true &#125;</code>，也可以同時修改多筆資料。</p><h4 id="修改的資料是多層陣列或多層物件"><a href="#修改的資料是多層陣列或多層物件" class="headerlink" title="修改的資料是多層陣列或多層物件"></a>修改的資料是多層陣列或多層物件</h4><p>如果資料裡面是陣列或物件，<br>想修改裡面的屬性就要把操作符換成 $push 或 $addToSet 新增 或 $pop 移除，<br>查詢條件支持用<code>.</code>搜尋，但要用<strong>引號</strong>包起來。</p><p>$push 與 $addToSet 的差別在於</p><ul><li>$push 會直接添加。</li><li>$addToSet 如果資料內有一樣的資料不會添加，沒有則會添加。</li></ul><h3 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h3><p><code>db.&lt;collection&gt;.remove(查詢條件)</code><br><code>db.&lt;collection&gt;.deleteMany(查詢條件)</code><br>刪除符合條件的多筆資料</p><p><code>db.&lt;collection&gt;.remove(查詢條件, true)</code><br><code>db.&lt;collection&gt;.deleteOne(查詢條件)</code><br>刪除符合條件的第一筆資料</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://ithelp.ithome.com.tw/articles/10186324">Day17 - MongoDB 安裝設定</a></li><li><a href="https://www.youtube.com/watch?v=Q9r8guQo58k&list=PLmOn9nNkQxJGX-finJqCSVVZx3gwn4Rga">MongoDB 入門教學影片</a></li><li><a href="https://docs.mongodb.com/manual/">MongoDB MANUAL</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>資料庫</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 三大屬性 Props</title>
    <link href="/2021/07/31/2021-7-31-react-props/"/>
    <url>/2021/07/31/2021-7-31-react-props/</url>
    
    <content type="html"><![CDATA[<h1 id="React-三大屬性-Props"><a href="#React-三大屬性-Props" class="headerlink" title="React - 三大屬性 Props"></a>React - 三大屬性 <strong>Props</strong></h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹組件 三大屬性中的 Props 屬性。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="Props-基礎"><a href="#Props-基礎" class="headerlink" title="Props - 基礎"></a>Props - 基礎</h2><ol><li><p>在 script 中，使用類式組件。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：小傑·富力士<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：男<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>念能力：強化系<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>這樣就先完成了最簡單的組件<br><img src="https://i.imgur.com/4FMKZSR.png" alt="組件"></p></li><li><p>接著開始運用<code>props</code>功能</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：&#123; this.props.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>年齡：&#123; this.props.age &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：&#123; this.props.gender &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在 Person 標籤內添加 props 屬性</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;小傑·富力士&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>接著開啟 live server，就可以查看到<code>props</code>內傳遞的值<br><img src="https://i.imgur.com/CwE0VGj.png" alt="Props 值"></p></li><li><p>再利用解構賦值，簡化程式碼</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 這樣每次使用都可以不用加 this.props 了</span><br>        <span class="hljs-keyword">const</span> &#123; name, age, gender &#125; = <span class="hljs-built_in">this</span>.props;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：&#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>年齡：&#123; age &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：&#123; gender &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在 Person 標籤內添加 props 屬性</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;小傑·富力士&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li></ol><h2 id="Props-批量傳遞-amp-運算"><a href="#Props-批量傳遞-amp-運算" class="headerlink" title="Props 批量傳遞 &amp; 運算"></a>Props 批量傳遞 &amp; 運算</h2><ol><li><p>當資料要代入許多<code>props</code>時，可以用 React 裡提供的方法，來批量傳遞</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; name, age, gender &#125; = <span class="hljs-built_in">this</span>.props;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：&#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>年齡：&#123; age &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：&#123; gender &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 資料</span><br><span class="hljs-keyword">const</span> hunter = &#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小傑·富力士&quot;</span>, <br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;12&quot;</span>, <br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span>, <br>&#125;<br><span class="hljs-comment">// 運用 React 裡提供的方法，類似 ES6 的展開運算符&#x27;...&#x27;，來批量傳遞</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...hunter</span>&#125;/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>當小傑使用強制成長，把年齡提升 10 歲則可以直接在<code>&#123;&#125;</code>內進行運算</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; name, age, gender &#125; = <span class="hljs-built_in">this</span>.props;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：&#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>年齡：&#123; age + 10 &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：&#123; gender &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 資料</span><br><span class="hljs-keyword">const</span> hunter = &#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小傑·富力士&quot;</span>, <br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;12&quot;</span>, <br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span>, <br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...hunter</span>&#125;/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>看到畫面時，這時候聰明的你，一定知道問題出在哪裡<br><img src="https://i.imgur.com/xlDYm6H.png" alt="型別問題"></p></li><li><p>沒錯！把資料的字串型態改成數字型態就能正常運算了。<br> <strong>當多人協作，且專案龐大時，很容易不小心出錯，變成難以找到問題</strong></p></li></ol><h3 id="檢查-props-資料型態與預處理的套件"><a href="#檢查-props-資料型態與預處理的套件" class="headerlink" title="檢查 props 資料型態與預處理的套件"></a>檢查 props 資料型態與預處理的<strong>套件</strong></h3><ol><li><p>有些時候資料不齊全時，可以設置一些警告，來避免找不到問題出在哪裡<br> 例如：資料沒有名字，性別亂寫，年齡是字串型態。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 資料</span><br><span class="hljs-keyword">const</span> hunter = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;12&quot;</span>, <br>    <span class="hljs-attr">gender</span>: <span class="hljs-number">9453</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p> <img src="https://i.imgur.com/vCsSlla.png" alt="錯誤呈現"></p></li><li><p>可以再環境配置裡新引入 <a href="https://cdnjs.com/libraries/prop-types">prop-types CDN</a></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.7.2/prop-types.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>為組件裡面，<code>render</code>上面，新增資料型態檢查</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 需注意這裡 propTypes 的 p 是小寫，React 設定的</span><br><span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-comment">// 這裡 PropTypes 的 P 是大寫，套件設定的</span><br>    <span class="hljs-attr">name</span>: PropTypes.string,<br>    <span class="hljs-attr">age</span>: PropTypes.number,<br>    <span class="hljs-attr">gender</span>: PropTypes.string,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>這時雖然畫面還是一樣，但開發人員工具就會出現警告<br> 馬上就能發現資料型態的錯誤<br><img src="https://i.imgur.com/fe8LdL1.png" alt="警告"></p></li><li><p>這時發現沒名字卻沒報錯，在必須傳遞的資料添加<code>.isRequired</code>，就會設定必須傳，否則報錯</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-comment">// 設定 isRequired 為必傳</span><br>    <span class="hljs-attr">name</span>: PropTypes.string.isRequired,<br>    <span class="hljs-attr">age</span>: PropTypes.number,<br>    <span class="hljs-attr">gender</span>: PropTypes.string,<br>    <span class="hljs-comment">// 如果要限定傳函數則設 PropTypes.func</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://i.imgur.com/SZ4jnbd.png" alt="警告"></p><ol start="6"><li><p>這時名字年齡修正好，而性別故意不寫的話，為不是必傳的值，新增默認值</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 新增默認值，如果沒有設年齡的預設值，資料沒年齡時，會變成 NaN</span><br><span class="hljs-keyword">static</span> defaultProps = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;無&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p> <img src="https://i.imgur.com/FnionQe.png" alt="成功畫面"></p></li></ol><h2 id="使用函數式組件來進行-props-傳遞"><a href="#使用函數式組件來進行-props-傳遞" class="headerlink" title="使用函數式組件來進行 props 傳遞"></a>使用函數式組件來進行 props 傳遞</h2><ul><li><p>雖然函數式組件沒有 this 指向，但可以透過參數來進行 props 傳遞</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"> props </span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; name, age, gender &#125; = props;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>姓名：&#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>年齡：&#123; age &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>性別：&#123; gender &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">// 資料</span><br><span class="hljs-keyword">const</span> hunter = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小傑·富力士&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...hunter</span>&#125;/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;app&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li></ul><h2 id="總結-Props"><a href="#總結-Props" class="headerlink" title="總結 Props"></a>總結 Props</h2><ol><li>props 是透過組件的<strong>標籤屬性</strong>傳遞。</li><li>PropTypes 套件非必須，但有使用除錯會比較快。<ul><li>需注意使用時的<strong>大小寫</strong>，大小寫寫錯雖然不會報錯，但會失效。</li></ul></li><li>props 是從組件<strong>外</strong>往組件<strong>內</strong>傳遞資料</li><li><strong>注意</strong> props 只能<strong>讀取</strong>，不可修改。</li><li>React 中 props 可以透過<code>...</code>展開運算符展開屬性</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 三大屬性 State</title>
    <link href="/2021/07/29/2021-7-29-react-state/"/>
    <url>/2021/07/29/2021-7-29-react-state/</url>
    
    <content type="html"><![CDATA[<h1 id="React-三大屬性-State"><a href="#React-三大屬性-State" class="headerlink" title="React - 三大屬性 State"></a>React - 三大屬性 <strong>State</strong></h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹組件 三大屬性中的 State 屬性，這裡還不會討論 Hook 運用。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="創建組件，完成基礎頁面"><a href="#創建組件，完成基礎頁面" class="headerlink" title="創建組件，完成基礎頁面"></a>創建組件，完成基礎頁面</h2><ol><li><p>在 script 中，要引用 React 的三大屬性，若不考慮使用 Hook ，則需使用類式組件。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你打疫苗了嗎? 還沒QQ<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現</p><p> <img src="https://i.imgur.com/y2nKsGB.png" alt="你打疫苗了嗎? 還沒QQ"></p></li></ol><h2 id="創建建構子，初始化狀態"><a href="#創建建構子，初始化狀態" class="headerlink" title="創建建構子，初始化狀態"></a>創建建構子，初始化狀態</h2><ol><li><p>在類式組件內添加建構子</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-comment">// 建構子，寫 props 傳遞參數</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-comment">// 建構子內要寫 super 接收 props，不然會報錯</span><br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-comment">// 初始化狀態，官方規定要寫物件型式</span><br>        <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">true</span> &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 這裡把回答變成 JS 表達式 &#123;&#125;，並使用用條件運算子</span><br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你打疫苗了嗎? </span><br><span class="xml">            &#123; this.state.vaccinated ? &#x27; 已經打了(．▽．) b&#x27; : &#x27; 還沒(Q A Q)&#x27; &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>因為我們把<code>vaccinated:</code>設為<code>true</code>，所以條件運算子就會選<code>:</code>前面的字串。</p><p> <img src="https://i.imgur.com/Mn3nvCs.png" alt="true 畫面"></p></li><li><p>如果我們把<code>vaccinated:</code>改成<code>false</code>，那麼條件運算子就會選擇<code>:</code>後面的字串。</p><p> <img src="https://i.imgur.com/y2nKsGB.png" alt="false 畫面"></p></li><li><p>這時打開開發者工具的 Component，可以看到<code>state</code>。</p><p> <img src="https://i.imgur.com/tLQV8Op.png" alt="State 狀態"></p></li><li><p>最後再更進階一點，把代碼更加精簡，將<code>render</code>內提取狀態進行<strong>解構賦值</strong>，讓程式更容易閱讀。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 在這裡先進行解構賦值，讀取狀態</span><br>    <span class="hljs-keyword">const</span> &#123; vaccinated &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-comment">// 這樣後面就可以直接利用變數，不用再加前墜</span><br>    <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你打疫苗了嗎? </span><br><span class="xml">        &#123; vaccinated ? &#x27; 已經打了(．▽．) b&#x27; : &#x27; 還沒(Q A Q)&#x27; &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="嘗試為頁面新增互動"><a href="#嘗試為頁面新增互動" class="headerlink" title="嘗試為頁面新增互動"></a>嘗試為頁面新增互動</h2><h3 id="類式組件中方法的-this-指向"><a href="#類式組件中方法的-this-指向" class="headerlink" title="類式組件中方法的 this 指向?"></a>類式組件中方法的 this 指向?</h3><ol><li><p>幫頁面中的<code>&lt;h2&gt;</code>新增<code>onClick</code>事件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">false</span> &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; vaccinated &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-comment">// 用來測試作為實例調用是否正常</span><br>        <span class="hljs-built_in">this</span>.changeVaccinated()<br>        <br>        <span class="hljs-comment">// 幫 &lt;h2&gt; 新增 onClick 事件，</span><br>        <span class="hljs-comment">// 需注意 React 的事件綁定改成用駝峰命名法，</span><br>        <span class="hljs-comment">// 並且調用方法要用 &#123;&#125; 包起來，</span><br>        <span class="hljs-comment">// 且要用 this 來調用函數，結尾不能加 ()</span><br>        <span class="hljs-comment">// 有加 () 會變成一開頁面就立即執行</span><br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.changeVaccinated</span> &#125;&gt;</span>你打疫苗了嗎? </span><br><span class="xml">            &#123; vaccinated ? &#x27; 已經打了(．▽．) b&#x27; : &#x27; 還沒(Q A Q)&#x27; &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>    &#125;<br>    <span class="hljs-comment">/* 接續下面 */</span><br></code></pre></td></tr></table></figure></li><li><p>並在類式組件內增加<code>onClick</code>所需調用的函數</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">    <span class="hljs-comment">/* 承接上面 */</span><br>    <br>    <span class="hljs-comment">// 將 changeVaccinated 放進 Vaccine 的原型變數裡，供實例使用</span><br>    <span class="hljs-comment">// 通過 Vaccine 實例調用 changeVaccinated 時</span><br>    <br>    <span class="hljs-comment">// 由於 changeVaccinated 是作為 onClick 的&#x27;回調函數&#x27;</span><br>    <span class="hljs-comment">// 所以不是通過&#x27;實例&#x27;調用，而是&#x27;直接&#x27;調用。</span><br>    <br>    <span class="hljs-comment">// 類中的方法默認開啟了局部的嚴格模式，</span><br>    <span class="hljs-comment">// 所以 changeVaccinated 中的 this 為 undefined</span><br>    <span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>點擊<code>你打疫苗了嗎?</code>後，打開開發者工具 Console ，觀察 this 回傳值</p><p> <img src="https://i.imgur.com/A6jSC6U.png" alt="組件內 this 的指向"></p></li><li><p>總結 this 指向結果，作為<code>onClick</code>直接調用函數會無法指向實例。</p><p> <img src="https://i.imgur.com/swv0Vza.png" alt="this 調用"></p></li></ol><h3 id="解決類式組件中方法-this-指向的問題"><a href="#解決類式組件中方法-this-指向的問題" class="headerlink" title="解決類式組件中方法 this 指向的問題"></a>解決類式組件中方法 this 指向的問題</h3><ol><li><p>只要在<code>constructor</code>中，多加一行程式碼就能解決 this 指向問題</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">false</span> &#125;<br>        <br>        <span class="hljs-comment">// 增加這一行，解決 changeVaccinated 中的 this 指向</span><br>        <span class="hljs-comment">// 右邊的 this.changeVaccinated 會先找到自身原型上的 changeVaccinated</span><br>        <span class="hljs-comment">// 調用了 bind(this) 方法，並把 this 綁在實例身上</span><br>        <span class="hljs-comment">// 然後將這個方法放到自身新增的 changeVaccinated (左邊)</span><br>        <span class="hljs-built_in">this</span>.changeVaccinated = <span class="hljs-built_in">this</span>.changeVaccinated.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>點擊<code>你打疫苗了嗎?</code>後，打開開發者頁面的 Console，就會看到 this 指向實例，並且添加了<code>changeVaccinated</code>方法</p><p> ![bind(this) 解決指向問題]](<a href="https://i.imgur.com/jJl2WYw.png">https://i.imgur.com/jJl2WYw.png</a>)</p></li></ol><h3 id="這段程式碼整個流程如下圖"><a href="#這段程式碼整個流程如下圖" class="headerlink" title="這段程式碼整個流程如下圖"></a>這段程式碼整個流程如下圖</h3><p><img src="https://i.imgur.com/rrBeuZ6.png" alt="這段程式碼整個流程如下圖"></p><h4 id="bind-方法做了什麼"><a href="#bind-方法做了什麼" class="headerlink" title="bind() 方法做了什麼?"></a>bind() 方法做了什麼?</h4><p>bind() 方法做了兩件事<br>    1. 會建立一個新的函數。<br>    2. 會幫你改函數裡面的 this</p><h3 id="小測驗"><a href="#小測驗" class="headerlink" title="小測驗"></a>小測驗</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Youtube</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123; <br>            <span class="hljs-attr">subscribed</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">youtube</span>: <span class="hljs-string">&#x27;https://www.youtube.com/channel/UC-b2nGm0xLzic38Byti0VjA&#x27;</span>,<br>        &#125;<br>        <span class="hljs-built_in">this</span>.____A____ = <span class="hljs-built_in">this</span>.____B____.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; subscribed, youtube &#125; = <span class="hljs-built_in">this</span>.state<br><br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.subscribe</span> &#125;&gt;</span>你訂閱六角學院的 Youtube 了嗎? </span><br><span class="xml">            &#123; subscribed ? &#x27; σ`∀´)σ 訂閱了，哪次不訂閱&#x27; : </span><br><span class="xml">            &#x27; 我就幫到這了(ㆆᴗㆆ) &#x27; + youtube &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">gogogo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>(<span class="hljs-string">&#x27;趕快去唄 =͟͟͞͞( •̀д•́)&#x27;</span>)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Youtube</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure><p>A 和 B 答案分別是甚麼 <a href="#%E9%80%99%E6%AE%B5%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%95%B4%E5%80%8B%E6%B5%81%E7%A8%8B%E5%A6%82%E4%B8%8B%E5%9C%96">不知道的話請點我</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">右邊有答案<span class="hljs-comment">-----------------------------------------------------------------------------A: subscribe / B: gogogo！</span><br></code></pre></td></tr></table></figure><h3 id="嘗試新增互動，剛學-React-必踏入過一次的坑"><a href="#嘗試新增互動，剛學-React-必踏入過一次的坑" class="headerlink" title="嘗試新增互動，剛學 React 必踏入過一次的坑"></a>嘗試新增互動，剛學 React 必踏入過一次的坑</h3><ol><li><p>首先取得 state 裡面的<code>vaccinated</code>值</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>嘗試修改 state</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>    <span class="hljs-built_in">this</span>.state.vaccinated = !vaccinated<br>    <span class="hljs-comment">// 用來測試是否有更改值</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.vaccinated)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>你會發現值確實有修改，但畫面不會變</p><p> <img src="https://i.imgur.com/rA3Ja4C.png" alt="你會發現值確實有修改，但畫面不會變"></p></li><li><p><strong>注意</strong>狀態( state )不可以直接修改<br><code>this.state.vaccinated = !vaccinated</code> 這行就是直接修改</p></li></ol><h2 id="使用-setState-來修改狀態"><a href="#使用-setState-來修改狀態" class="headerlink" title="使用 setState 來修改狀態"></a>使用 setState 來修改狀態</h2><ol><li><p>一樣先取得 state 裡面的<code>vaccinated</code>值</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 setState() 方法，<br> <strong>注意</strong>狀態( state )必須透過 setState 進行修改</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">vaccinated</span>: !vaccinated &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>這時畫面就能點擊切換</p><p> <img src="https://i.imgur.com/5igofn0.gif" alt="成功觸發切換"></p></li></ol><h2 id="state-的簡寫方式"><a href="#state-的簡寫方式" class="headerlink" title="state 的簡寫方式"></a>state 的簡寫方式</h2><p>使用<strong>類的基礎知識</strong>簡化 state</p><ol><li><p>這是原來的程式碼</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">false</span> &#125;<br>        <span class="hljs-built_in">this</span>.changeVaccinated = <span class="hljs-built_in">this</span>.changeVaccinated.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; vaccinated &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.changeVaccinated</span> &#125;&gt;</span>你打疫苗了嗎? </span><br><span class="xml">            &#123; vaccinated ? &#x27; 已經打了(．▽．) b&#x27; : &#x27; 還沒(Q A Q)&#x27; &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-title">changeVaccinated</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">vaccinated</span>: !vaccinated &#125;)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>將 constructor 中的 state 拉出來</p><ul><li>類中可以直接寫賦值語句 = 往實例裡面追加屬性</li></ul> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-comment">// this.state = &#123; vaccinated: false &#125;</span><br>        <span class="hljs-built_in">this</span>.changeVaccinated = <span class="hljs-built_in">this</span>.changeVaccinated.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 使用賦值語句，拉出 constructor</span><br>    state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">false</span> &#125;<br><br>    <span class="hljs-comment">/* 以下省略 */</span><br></code></pre></td></tr></table></figure></li><li><p>將函數改成<strong>賦值語句</strong> + <strong>ES6 箭頭函數</strong>的寫法，並省略 constructor 裡面的 bind()</p><p> 利用箭頭函數的特點</p><ul><li>沒有自己的 this</li><li>使用 this 時，會找其外側函數的 this，作為箭頭函數 this 去使用</li></ul> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">    <span class="hljs-comment">/* 以上省略 */</span><br>    <br> <span class="hljs-comment">// changeVaccinated()&#123;</span><br> <span class="hljs-comment">//     const vaccinated = this.state.vaccinated</span><br> <span class="hljs-comment">//     this.setState(&#123; vaccinated: !vaccinated &#125;)</span><br> <span class="hljs-comment">// &#125;</span><br>    <br>    <span class="hljs-comment">// 改成 ES6 箭頭函數</span><br>    changeVaccinated = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">vaccinated</span>: !vaccinated &#125;)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li><li><p>省略整個 constructor，最後簡化結果</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vaccine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化狀態</span><br>    state = &#123; <span class="hljs-attr">vaccinated</span>: <span class="hljs-literal">false</span> &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; vaccinated &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.changeVaccinated</span> &#125;&gt;</span>你打疫苗了嗎? </span><br><span class="xml">            &#123; vaccinated ? &#x27; 已經打了(．▽．) b&#x27; : &#x27; 還沒(Q A Q)&#x27; &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>    &#125;<br>    <span class="hljs-comment">// 自定義方法 - 藥用賦值語句的型式 + 箭頭函數</span><br>    changeVaccinated = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> vaccinated = <span class="hljs-built_in">this</span>.state.vaccinated<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">vaccinated</span>: !vaccinated &#125;)<br>    &#125;<br>&#125;<br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Vaccine</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br></code></pre></td></tr></table></figure></li></ol><h2 id="總結-State"><a href="#總結-State" class="headerlink" title="總結 State"></a>總結 State</h2><h3 id="什麼是-State"><a href="#什麼是-State" class="headerlink" title="什麼是 State ?"></a>什麼是 State ?</h3><ol><li>State 是組件中最重要的屬性，值是<strong>物件</strong>（可以包含多個 key-value）。</li><li>通過更新 State 重新渲染組件。</li></ol><h3 id="State-必須注意的要點"><a href="#State-必須注意的要點" class="headerlink" title="State 必須注意的要點"></a>State 必須注意的要點</h3><ol><li><p>組件中 render 方法中的 this 為組件的實例物件。</p></li><li><p>組件自訂義的函數中，this 為<code>undefined</code>如何解決?</p><ul><li>強制綁定 this：通過函數<code>bind()</code>方法</li><li>賦值語句 + 箭頭函數</li></ul></li><li><p>狀態資料，不能直接修改或更新，必須借助<code>setState()</code>來更新</p></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/state-and-lifecycle.html">React 官網 - State &amp; 生命週期</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 類式組件</title>
    <link href="/2021/07/28/2021-7-28-react-classComponent/"/>
    <url>/2021/07/28/2021-7-28-react-classComponent/</url>
    
    <content type="html"><![CDATA[<h1 id="⚛️-React-類式組件"><a href="#⚛️-React-類式組件" class="headerlink" title="⚛️ React - 類式組件"></a>⚛️ React - 類式組件</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹 class component 最基礎的起手式。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="創建類式組件"><a href="#創建類式組件" class="headerlink" title="創建類式組件"></a>創建類式組件</h2><ol><li><p>在 script 中，創建類式組件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 創建類式組件，必須繼承 React 中 Component 這個組件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-comment">// 類式組件必須要有 render</span><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// render 中的實例變數是 Demo</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render 中的 this:&#x27;</span>, <span class="hljs-built_in">this</span>)<br>        <span class="hljs-comment">// 必須要有 return 返回值</span><br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是類式組件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 2.讓 React 自動渲染組件到頁面，需注意組件首字母大寫且閉合</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br><br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/UiHFfl6.png" alt="class component"></p></li><li><p>打開開發人員工具的 Console，可以看到類的實例變數 和 組件三大屬性<br> <img src="https://i.imgur.com/CWy1XsS.png" alt="開發人員工具"></p></li></ol><h2 id="執行組件後-React-做了什麼"><a href="#執行組件後-React-做了什麼" class="headerlink" title="執行組件後 React 做了什麼?"></a>執行組件後 React 做了什麼?</h2><ol><li>React 解析組件標籤，找到了 Demo 組件。</li><li>發現組件是使用類定義的，隨後 new 出來該類的實例，並通過該實例調用到原型上的 render 方法。</li><li>將返回的虛擬 DOM 轉為真實 DOM，隨後呈現在頁面中。</li></ol><h2 id="類式組件-5-大重點須知"><a href="#類式組件-5-大重點須知" class="headerlink" title="類式組件 5 大重點須知"></a>類式組件 5 大重點須知</h2><ol><li>組件首字母必須大寫</li><li>必須輸入<code>extends React.Component</code>繼承 React 中 Component 這個組件</li><li>類式組件內必須要有 render 渲染</li><li>必須要 return 返回值</li><li>讓 ReactDOM 渲染必須使用閉合標籤</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 函數式組件</title>
    <link href="/2021/07/28/2021-7-28-react-functionComponent/"/>
    <url>/2021/07/28/2021-7-28-react-functionComponent/</url>
    
    <content type="html"><![CDATA[<h1 id="React-函數式組件"><a href="#React-函數式組件" class="headerlink" title="React - 函數式組件"></a>React - 函數式組件</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹 function component 最基礎的起手式，這裡還不會介紹到 Hook 的運用。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="創建函數式組件"><a href="#創建函數式組件" class="headerlink" title="創建函數式組件"></a>創建函數式組件</h2><ol><li><p>在 script 中，創建函數式組件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 創建函數式組件，定義組件首字母要大寫</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 此處 this 是 undefined，因為 Babel 編譯後開啟嚴格模式</span><br>    <span class="hljs-built_in">console</span>.log( <span class="hljs-built_in">this</span> )<br>    <span class="hljs-comment">// 必須要有 return 返回值</span><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是函數式組件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 2.讓 React 自動渲染組件到頁面，需注意組件首字母大寫且閉合</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br><br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/RZeT2Df.png" alt="function component"></p></li><li><p>打開開發人員工具的 Components 頁面可以看到組件、屬性與版本<br> <img src="https://i.imgur.com/roztIxH.png" alt="開發人員工具"></p></li></ol><h2 id="執行組件後-React-做了什麼"><a href="#執行組件後-React-做了什麼" class="headerlink" title="執行組件後 React 做了什麼?"></a>執行組件後 React 做了什麼?</h2><ol><li>React 解析組件標籤，找到了 Demo 組件。</li><li>發現組件是使用函數定義的，隨後調用該函數，將返回的虛擬 DOM 轉為真實 DOM，隨後呈現在頁面中。</li></ol><h2 id="函數式組件-3-大重點須知"><a href="#函數式組件-3-大重點須知" class="headerlink" title="函數式組件 3 大重點須知"></a>函數式組件 3 大重點須知</h2><ol><li>組件首字母必須大寫</li><li>必須要 return 返回值</li><li>讓 ReactDOM 渲染必須使用閉合標籤</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 組件 與 模組</title>
    <link href="/2021/07/27/2021-7-27-react-component/"/>
    <url>/2021/07/27/2021-7-27-react-component/</url>
    
    <content type="html"><![CDATA[<h1 id="React-組件-與-模組"><a href="#React-組件-與-模組" class="headerlink" title="React - 組件 與 模組"></a>React - 組件 與 模組</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提升開發效率，就要了解組件與模組的概念，用簡單的言語解說，並了解開發 React 所需要的開發者工具</p><!-- more --><h2 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h2><ol><li>什麼是模組? 向外提供特定功能的 JS 程序，一般就是一個 JS 文件。</li><li>為什麼要拆成模組呢? 隨著業務邏輯增加，代碼越來越多且複雜。</li><li>最終結果是更能重複利用 JS，簡化 JS 編寫，提高 JS 的效率。</li></ol><h3 id="模組化"><a href="#模組化" class="headerlink" title="模組化"></a>模組化</h3><p>當應用程式的 JS 都以模組來編寫，就是一個模組化的應用程式</p><h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><ol><li>什麼是組件? 用來實現局部功能效果的代碼和資源的集合體（HTML / CSS / JS / Image）。</li><li>為什麼拆成組件呢? 一個頁面的功能更複雜。</li><li>最終結果是重複利用代碼，簡化項目編寫，提高運行效率。<br><img src="https://i.imgur.com/REJTFyp.png" alt="React module"></li></ol><p><em>此為 React 官網作為範例</em><br>React 官網一看，大致上可以拆成三個組件（Header / Content / Menu），甚至還可以拆得更細。</p><h3 id="組件化"><a href="#組件化" class="headerlink" title="組件化"></a>組件化</h3><p>當應用程式是以多組件的方式完成，就是一個組件化的應用程式</p><h2 id="React-開發人員工具"><a href="#React-開發人員工具" class="headerlink" title="React 開發人員工具"></a>React 開發人員工具</h2><p>在正式開發組件之前，要先下載 React 開發人員工具</p><ol><li>打開 Chrome 線上應用程式商店</li><li>搜尋 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-TW">React Developer Tools</a> 並下載。</li><li>點擊瀏覽器右上方的 Google 擴充功能，把開發者工具釘選上去。<br> <img src="https://i.imgur.com/3Uz8xcM.png" alt="Google 擴充功能"></li><li>開發者工具會有三種顏色呈現方式<table><thead><tr><th align="center">圖案</th><th align="center">解說</th></tr></thead><tbody><tr><td align="center"><img src="https://i.imgur.com/IlEAqv5.png" alt="Unused React"></td><td align="center">灰色，表示當前網頁不是用 React 開發的</td></tr><tr><td align="center"><img src="https://i.imgur.com/H3FqcQp.png" alt="Developer React"></td><td align="center">紅色，表示當前網頁還處於開發者模式，未打包上線</td></tr><tr><td align="center"><img src="https://i.imgur.com/5M7z7Gc.png" alt="Go live"></td><td align="center">藍色，表示當前網頁已打包上線</td></tr></tbody></table></li><li>按 F12 開發者工具內會新增兩個選項<br> <img src="https://i.imgur.com/MemNL3r.png" alt="Tools"><ul><li>Components 用來觀察網頁內有多少個組件組成的。</li><li>Profiler 用來記錄網站的性能。</li></ul></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 基礎</title>
    <link href="/2021/07/26/2021-7-26-react-base/"/>
    <url>/2021/07/26/2021-7-26-react-base/</url>
    
    <content type="html"><![CDATA[<h1 id="React-基礎"><a href="#React-基礎" class="headerlink" title="React - 基礎"></a>React - 基礎</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>學習 React 中最重要的角色「Babel」，Babel 是 Javascript 的編譯器，有了 Babel 就能更方便順暢的使用 React</p><!-- more --><h2 id="React-基礎環境引入"><a href="#React-基礎環境引入" class="headerlink" title="React - 基礎環境引入"></a>React - 基礎環境引入</h2><ol><li>Babel<ul><li><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><ol><li>瀏覽器不認識 ES6，依靠 Babel 把 ES6 轉成 ES5</li><li>瀏覽器不認識 jsx，依靠 Babel 把 jsx 轉成 js</li><li>可以更流暢的編碼</li></ol></li><li>React 核心庫<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react@17/umd/react.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>React 擴展庫（讓 React 幫你操作 DOM）<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ol><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>首先建立一個 HTML</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 先準備一個容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入 React 核心庫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 React DOM，用來讓 React 操作 DOM --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 Babel，用來將 jsx 轉成 js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 這裡一定要寫 type=&quot;text/babel&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>並在 script 內編寫虛擬 DOM</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 首先創建虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = &#123;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 2. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/qh3CLyD.png" alt="Hello world"></p></li></ol><h2 id="React-jsx-語法規則-與-必須知道的地方"><a href="#React-jsx-語法規則-與-必須知道的地方" class="headerlink" title="React - jsx 語法規則 與 必須知道的地方"></a>React - jsx 語法規則 與 必須知道的地方</h2><ol><li><p>這時候 HTML 添加樣式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.bg-hexschool</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#69F0AE</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>script 內將內容用變數的方式展現</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 宣告變數    </span><br><span class="hljs-keyword">const</span> myId = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-keyword">const</span> myData = <span class="hljs-string">&quot;Hello world&quot;</span><br><br><span class="hljs-comment">// 2. 建創虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = (<br>    <span class="hljs-comment">// 虛擬 DOM 只能有一個根標籤</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    &#123;/* jsx 語法範例如下 */&#125;</span><br><span class="xml">    &#123;/* class 要改成 className */&#125;</span><br><span class="xml">    &#123;/* style 要用 &#123;&#123; key=value &#125;&#125; 包起來，並採用駝峰命名法 */&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">myId</span> &#125; </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-hexschool&quot;</span> </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="xml">            &#123;/* JS 表達式都要用 &#123;&#125; 包起來，包含註解 */&#125;</span><br><span class="xml">            &#123; myData &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>虛擬 DOM 只能用一個標籤包起來<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        &#123;/* 標籤需要閉合，例如最後面加 &quot;/&quot; */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     <span class="hljs-comment">// &lt;p&gt;這個沒有被包起來，會報錯&lt;/p&gt;</span><br>)<br><span class="hljs-comment">// 3. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/1lrecAZ.png" alt="jsx 運用"></p></li></ol><h3 id="總結-jsx-語法規則"><a href="#總結-jsx-語法規則" class="headerlink" title="總結 jsx 語法規則"></a>總結 jsx 語法規則</h3><ol><li>定義虛擬 DOM 時，不要寫<strong>引號</strong>。</li><li>標籤中混入 JS 表達式要用 <code>&#123;&#125;</code> 包起來。</li><li>樣式的類名指定不要用 <code>class</code>，要用 <code>className</code>。</li><li>內聯樣式，要用 <code>style=&#123;&#123; key=value &#125;&#125;</code>的形式去寫。<ol><li>key 如果像是 <code>font-size</code>，要改成<strong>駝峰命名</strong> <code>fontSize</code>。</li><li>value 需要用<strong>引號</strong>包起來。</li></ol></li><li>虛擬 DOM 必須只有<strong>一個根標籤</strong></li><li>標籤必須<strong>閉合</strong></li><li>標籤首字母<ol><li>如果小寫開頭，則將把標籤轉為 HTML 中同名元素，如果 HTML 中無該標籤同名元素，則報錯。</li><li>如果大寫開頭，React 就去渲染對應的組件，如果組件沒有定義，則報錯</li></ol></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/cdn-links.html">React 官網 - CDN 連結</a></li><li><a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html">React 官網 - JSX 介紹</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 簡介</title>
    <link href="/2021/07/26/2021-7-26-react-introduction/"/>
    <url>/2021/07/26/2021-7-26-react-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="React-簡介"><a href="#React-簡介" class="headerlink" title="React - 簡介"></a>React - 簡介</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這裡將會記錄我學習 React 的筆記，雖然說是從 0 開始學習，但該有的 Javascript 知識還是要有。</p><!-- more --><h3 id="學習-React-所需要的-Javascript-知識"><a href="#學習-React-所需要的-Javascript-知識" class="headerlink" title="學習 React 所需要的 Javascript 知識"></a>學習 React 所需要的 Javascript 知識</h3><ul><li><input checked="" disabled="" type="checkbox"> 判斷 this 指向</li><li><input checked="" disabled="" type="checkbox"> class 的概念</li><li><input checked="" disabled="" type="checkbox"> Javascript ES6 的語法規範</li><li><input checked="" disabled="" type="checkbox"> npm 套件管理工具</li><li><input checked="" disabled="" type="checkbox"> 繼承與原型鏈</li><li><input checked="" disabled="" type="checkbox"> 數列常用方法</li><li><input checked="" disabled="" type="checkbox"> 模組化</li></ul><h2 id="React-是什麼"><a href="#React-是什麼" class="headerlink" title="React 是什麼 ?"></a>React 是什麼 ?</h2><ul><li>React 是一個實作使用者介面的 JavaScript 函式庫。</li></ul><h2 id="誰開發的"><a href="#誰開發的" class="headerlink" title="誰開發的 ?"></a>誰開發的 ?</h2><ul><li>由 Facebook 開發，並且開源。</li></ul><h2 id="為什麼要學"><a href="#為什麼要學" class="headerlink" title="為什麼要學 ?"></a>為什麼要學 ?</h2><ol><li><p>原生 Javascript 操作 DOM 繁瑣，效率<strong>低</strong> ( DOM-API 操作 UI )。</p></li><li><p>使用 Javascript 直接操作 DOM，瀏覽器會<strong>大量重新</strong>繪製畫面。</p><p> <img src="https://i.imgur.com/MAar8Vs.png" alt="原生 JS 渲染畫面流程，每次新增資料，都會重新渲染畫面"></p></li><li><p>原生 Javascript 沒有<strong>組件化</strong>程式碼功能，程式碼重複利用率低。</p></li></ol><h2 id="React-的優點"><a href="#React-的優點" class="headerlink" title="React 的優點"></a>React 的優點</h2><ol><li><p>採用<strong>組件化</strong>模式，<strong>聲明式編碼</strong>，提高開發效率及組件複用率。</p><ul><li>聲明式編碼 與 命令式編碼 的差別<ul><li>命令式編碼: 透過 Javascript 或 JQuery 拿到要操作的 DOM，並命令它改樣式。<br>  生活中的例子：<blockquote><p>老師口渴想喝水，命令同學去哪個地方裝水。<br>這就是命令式編碼，其中少做任何步驟，老師都會喝不到水</p></blockquote></li><li>聲明式編碼: 透過一些特殊的語法，表達它是甚麼樣式，然後 React 自動幫你改了。<br>  生活中的例子：<blockquote><p>老師說喉嚨有點乾，同學自動站起來遞水過來。<br>這就是聲明式編碼</p></blockquote></li></ul></li></ul></li><li><p>React Native 中可以使用 React 語法進行<strong>移動端開發</strong>。</p></li><li><p>使用<strong>虛擬 DOM</strong> + 優秀的 <strong>Diffing 算法</strong>，盡量減少與真實 DOM 的直接作用。</p><p> <img src="https://i.imgur.com/3ibcbkp.png" alt="React 渲染畫面流程，每次新增資料，都會比對虛擬 DOM，不一樣的 DOM 才渲染上去"></p></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://reactjs.org/">React 官網</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>程式語言</category>
      
      <category>前端</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
