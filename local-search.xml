<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React - 基礎</title>
    <link href="/2021/07/26/2021-7-26-react-base/"/>
    <url>/2021/07/26/2021-7-26-react-base/</url>
    
    <content type="html"><![CDATA[<h1 id="React-基礎"><a href="#React-基礎" class="headerlink" title="React - 基礎"></a>React - 基礎</h1><p><img src="https://i.postimg.cc/76CsH11k/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>學習 React 中最重要的角色「Babel」，Babel 是 Javascript 的編譯器，有了 Babel 就能更方便順暢的使用 React</p><span id="more"></span><h2 id="React-基礎環境引入"><a href="#React-基礎環境引入" class="headerlink" title="React - 基礎環境引入"></a>React - 基礎環境引入</h2><ol><li>Babel<ul><li><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><ol><li>瀏覽器不認識 ES6，依靠 Babel 把 ES6 轉成 ES5</li><li>瀏覽器不認識 jsx，依靠 Babel 把 jsx 轉成 js</li><li>可以更流暢的編碼</li></ol></li><li>React 核心庫<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react@17/umd/react.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>React 擴展庫（讓 React 幫你操作 DOM）<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ol><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>首先建立一個 HTML</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 先準備一個容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入 React 核心庫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 React DOM，用來讓 React 操作 DOM --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 Babel，用來將 jsx 轉成 js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 這裡一定要寫 type=&quot;text/babel&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>並在 script 內編寫虛擬 DOM</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 首先創建虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = &#123;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 2. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/qh3CLyD.png" alt="Hello world"></p></li></ol><h2 id="React-jsx-語法規則-與-必須知道的地方"><a href="#React-jsx-語法規則-與-必須知道的地方" class="headerlink" title="React - jsx 語法規則 與 必須知道的地方"></a>React - jsx 語法規則 與 必須知道的地方</h2><ol><li><p>這時候 HTML 添加樣式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.bg-hexschool</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#69F0AE</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>script 內將內容用變數的方式展現</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 宣告變數    </span><br><span class="hljs-keyword">const</span> myId = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-keyword">const</span> myData = <span class="hljs-string">&quot;Hello world&quot;</span><br><br><span class="hljs-comment">// 2. 建創虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = (<br>    <span class="hljs-comment">// 虛擬 DOM 只能有一個根標籤</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    &#123;/* jsx 語法範例如下 */&#125;</span><br><span class="xml">    &#123;/* class 要改成 className */&#125;</span><br><span class="xml">    &#123;/* style 要用 &#123;&#123; key=value &#125;&#125; 包起來，並採用駝峰命名法 */&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">myId</span> &#125; </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-hexschool&quot;</span> </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="xml">            &#123;/* JS 表達式都要用 &#123;&#125; 包起來，包含註解 */&#125;</span><br><span class="xml">            &#123; myData &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>虛擬 DOM 只能用一個標籤包起來<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        &#123;/* 標籤需要閉合，例如最後面加 &quot;/&quot; */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     <span class="hljs-comment">// &lt;p&gt;這個沒有被包起來，會報錯&lt;/p&gt;</span><br>)<br><span class="hljs-comment">// 3. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/1lrecAZ.png" alt="jsx 運用"></p></li></ol><h3 id="總結-jsx-語法規則"><a href="#總結-jsx-語法規則" class="headerlink" title="總結 jsx 語法規則"></a>總結 jsx 語法規則</h3><ol><li>定義虛擬 DOM 時，不要寫<strong>引號</strong>。</li><li>標籤中混入 JS 表達式要用 <code>&#123;&#125;</code> 包起來。</li><li>樣式的類名指定不要用 <code>class</code>，要用 <code>className</code>。</li><li>內聯樣式，要用 <code>style=&#123;&#123; key=value &#125;&#125;</code>的形式去寫。<ol><li>key 如果像是 <code>font-size</code>，要改成<strong>駝峰命名</strong> <code>fontSize</code>。</li><li>value 需要用<strong>引號</strong>包起來。</li></ol></li><li>虛擬 DOM 必須只有<strong>一個根標籤</strong></li><li>標籤必須<strong>閉合</strong></li><li>標籤首字母<ol><li>如果小寫開頭，則將把標籤轉為 HTML 中同名元素，如果 HTML 中無該標籤同名元素，則報錯。</li><li>如果大寫開頭，React 就去渲染對應的組件，如果組件沒有定義，則報錯</li></ol></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/cdn-links.html">React 官網 - CDN 連結</a></li><li><a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html">React 官網 - JSX 介紹</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 簡介</title>
    <link href="/2021/07/26/2021-7-26-react-introduction/"/>
    <url>/2021/07/26/2021-7-26-react-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="React-簡介"><a href="#React-簡介" class="headerlink" title="React - 簡介"></a>React - 簡介</h1><p><img src="https://i.postimg.cc/76CsH11k/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這裡將會記錄我學習 React 的筆記，雖然說是從 0 開始學習，但該有的 Javascript 知識還是要有。</p><span id="more"></span><h3 id="學習-React-所需要的-Javascript-知識"><a href="#學習-React-所需要的-Javascript-知識" class="headerlink" title="學習 React 所需要的 Javascript 知識"></a>學習 React 所需要的 Javascript 知識</h3><ul><li><input checked="" disabled="" type="checkbox"> 判斷 this 指向</li><li><input checked="" disabled="" type="checkbox"> class 的概念</li><li><input checked="" disabled="" type="checkbox"> Javascript ES6 的語法規範</li><li><input checked="" disabled="" type="checkbox"> npm 套件管理工具</li><li><input checked="" disabled="" type="checkbox"> 繼承與原型鏈</li><li><input checked="" disabled="" type="checkbox"> 數列常用方法</li><li><input checked="" disabled="" type="checkbox"> 模組化</li></ul><h2 id="React-是什麼"><a href="#React-是什麼" class="headerlink" title="React 是什麼 ?"></a>React 是什麼 ?</h2><ul><li>React 是一個實作使用者介面的 JavaScript 函式庫。</li></ul><h2 id="誰開發的"><a href="#誰開發的" class="headerlink" title="誰開發的 ?"></a>誰開發的 ?</h2><ul><li>由 Facebook 開發，並且開源。</li></ul><h2 id="為什麼要學"><a href="#為什麼要學" class="headerlink" title="為什麼要學 ?"></a>為什麼要學 ?</h2><ol><li><p>原生 Javascript 操作 DOM 繁瑣，效率<strong>低</strong> ( DOM-API 操作 UI )。</p></li><li><p>使用 Javascript 直接操作 DOM，瀏覽器會<strong>大量重新</strong>繪製畫面。</p><p> <img src="https://i.imgur.com/MAar8Vs.png" alt="原生 JS 渲染畫面流程，每次新增資料，都會重新渲染畫面"></p></li><li><p>原生 Javascript 沒有<strong>組件化</strong>程式碼功能，程式碼重複利用率低。</p></li></ol><h2 id="React-的優點"><a href="#React-的優點" class="headerlink" title="React 的優點"></a>React 的優點</h2><ol><li><p>採用<strong>組件化</strong>模式，<strong>聲明式編碼</strong>，提高開發效率及組件複用率。</p><ul><li>聲明式編碼 與 命令式編碼 的差別<ul><li>命令式編碼: 透過 Javascript 或 JQuery 拿到要操作的 DOM，並命令它改樣式。<br>  生活中的例子：<blockquote><p>老師口渴想喝水，命令同學去哪個地方裝水。<br>這就是命令式編碼，其中少做任何步驟，老師都會喝不到水</p></blockquote></li><li>聲明式編碼: 透過一些特殊的語法，表達它是甚麼樣式，然後 React 自動幫你改了。<br>  生活中的例子：<blockquote><p>老師說喉嚨有點乾，同學自動站起來遞水過來。<br>這就是聲明式編碼</p></blockquote></li></ul></li></ul></li><li><p>React Native 中可以使用 React 語法進行<strong>移動端開發</strong>。</p></li><li><p>使用<strong>虛擬 DOM</strong> + 優秀的 <strong>Diffing 算法</strong>，盡量減少與真實 DOM 的直接作用。</p><p> <img src="https://i.imgur.com/3ibcbkp.png" alt="React 渲染畫面流程，每次新增資料，都會比對虛擬 DOM，不一樣的 DOM 才渲染上去"></p></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://reactjs.org/">React 官網</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
