<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React - 類式組件</title>
    <link href="/2021/07/27/2021-7-27-react-classComponent/"/>
    <url>/2021/07/27/2021-7-27-react-classComponent/</url>
    
    <content type="html"><![CDATA[<h1 id="⚛️-React-類式組件"><a href="#⚛️-React-類式組件" class="headerlink" title="⚛️ React - 類式組件"></a>⚛️ React - 類式組件</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹 class component 最基礎的起手式。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="創建類式組件"><a href="#創建類式組件" class="headerlink" title="創建類式組件"></a>創建類式組件</h2><ol><li><p>在 script 中，創建類式組件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 創建類式組件，必須繼承 React 中 Component 這個組件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-comment">// 類式組件必須要有 render</span><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// render 中的實例變數是 Demo</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render 中的 this:&#x27;</span>, <span class="hljs-built_in">this</span>)<br>        <span class="hljs-comment">// 必須要有 return 返回值</span><br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是類式組件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 2.讓 React 自動渲染組件到頁面，需注意組件首字母大寫且閉合</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br><br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/UiHFfl6.png" alt="class component"></p></li><li><p>打開開發人員工具的 Console，可以看到類的實例變數 和 組件三大屬性<br> <img src="https://i.imgur.com/CWy1XsS.png" alt="開發人員工具"></p></li></ol><h2 id="執行組件後-React-做了什麼"><a href="#執行組件後-React-做了什麼" class="headerlink" title="執行組件後 React 做了什麼?"></a>執行組件後 React 做了什麼?</h2><ol><li>React 解析組件標籤，找到了 Demo 組件。</li><li>發現組件是使用類定義的，隨後 new 出來該類的實例，並通過該實例調用到原型上的 render 方法。</li><li>將返回的虛擬 DOM 轉為真實 DOM，隨後呈現在頁面中。</li></ol><h2 id="類式組件-5-大重點須知"><a href="#類式組件-5-大重點須知" class="headerlink" title="類式組件 5 大重點須知"></a>類式組件 5 大重點須知</h2><ol><li>組件首字母必須大寫</li><li>必須輸入<code>extends React.Component</code>繼承 React 中 Component 這個組件</li><li>類式組件內必須要有 render 渲染</li><li>必須要 return 返回值</li><li>讓 ReactDOM 渲染必須使用閉合標籤</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 函數式組件</title>
    <link href="/2021/07/27/2021-7-27-react-functionComponent/"/>
    <url>/2021/07/27/2021-7-27-react-functionComponent/</url>
    
    <content type="html"><![CDATA[<h1 id="⚛️-React-函數式組件"><a href="#⚛️-React-函數式組件" class="headerlink" title="⚛️ React - 函數式組件"></a>⚛️ React - 函數式組件</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹 function component 最基礎的起手式，這裡還不會介紹到 Hook 的運用。</p><!-- more --><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>老規矩，先建立一個 HTML，並搭建好環境</p><p> <a href="/2021/07/26/2021-7-26-react-base/#React-%E8%B5%B7%E6%89%8B%E5%BC%8F">還不知道 HTML 起手式請點我</a></p></li></ol><h2 id="創建函數式組件"><a href="#創建函數式組件" class="headerlink" title="創建函數式組件"></a>創建函數式組件</h2><ol><li><p>在 script 中，創建函數式組件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 創建函數式組件，定義組件首字母要大寫</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 此處 this 是 undefined，因為 Babel 編譯後開啟嚴格模式</span><br>    <span class="hljs-built_in">console</span>.log( <span class="hljs-built_in">this</span> )<br>    <span class="hljs-comment">// 必須要有 return 返回值</span><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是函數式組件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 2.讓 React 自動渲染組件到頁面，需注意組件首字母大寫且閉合</span><br>ReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">&#x27;container&#x27;</span> ) )<br><br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/RZeT2Df.png" alt="function component"></p></li><li><p>打開開發人員工具的 Components 頁面可以看到組件、屬性與版本<br> <img src="https://i.imgur.com/roztIxH.png" alt="開發人員工具"></p></li></ol><h2 id="執行組件後-React-做了什麼"><a href="#執行組件後-React-做了什麼" class="headerlink" title="執行組件後 React 做了什麼?"></a>執行組件後 React 做了什麼?</h2><ol><li>React 解析組件標籤，找到了 Demo 組件。</li><li>發現組件是使用函數定義的，隨後調用該函數，將返回的虛擬 DOM 轉為真實 DOM，隨後呈現在頁面中。</li></ol><h2 id="函數式組件-3-大重點須知"><a href="#函數式組件-3-大重點須知" class="headerlink" title="函數式組件 3 大重點須知"></a>函數式組件 3 大重點須知</h2><ol><li>組件首字母必須大寫</li><li>必須要 return 返回值</li><li>讓 ReactDOM 渲染必須使用閉合標籤</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 組件 與 模組</title>
    <link href="/2021/07/27/2021-7-27-react-component/"/>
    <url>/2021/07/27/2021-7-27-react-component/</url>
    
    <content type="html"><![CDATA[<h1 id="React-組件-與-模組"><a href="#React-組件-與-模組" class="headerlink" title="React - 組件 與 模組"></a>React - 組件 與 模組</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提升開發效率，就要了解組件與模組的概念，用簡單的言語解說，並了解開發 React 所需要的開發者工具</p><!-- more --><h2 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h2><ol><li>什麼是模組? 向外提供特定功能的 JS 程序，一般就是一個 JS 文件。</li><li>為什麼要拆成模組呢? 隨著業務邏輯增加，代碼越來越多且複雜。</li><li>最終結果是更能重複利用 JS，簡化 JS 編寫，提高 JS 的效率。</li></ol><h3 id="模組化"><a href="#模組化" class="headerlink" title="模組化"></a>模組化</h3><p>當應用程式的 JS 都以模組來編寫，就是一個模組化的應用程式</p><h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><ol><li>什麼是組件? 用來實現局部功能效果的代碼和資源的集合體（HTML / CSS / JS / Image）。</li><li>為什麼拆成組件呢? 一個頁面的功能更複雜。</li><li>最終結果是重複利用代碼，簡化項目編寫，提高運行效率。<br><img src="https://i.imgur.com/REJTFyp.png" alt="React module"></li></ol><p><em>此為 React 官網作為範例</em><br>React 官網一看，大致上可以拆成三個組件（Header / Content / Menu），甚至還可以拆得更細。</p><h3 id="組件化"><a href="#組件化" class="headerlink" title="組件化"></a>組件化</h3><p>當應用程式是以多組件的方式完成，就是一個組件化的應用程式</p><h2 id="React-開發人員工具"><a href="#React-開發人員工具" class="headerlink" title="React 開發人員工具"></a>React 開發人員工具</h2><p>在正式開發組件之前，要先下載 React 開發人員工具</p><ol><li>打開 Chrome 線上應用程式商店</li><li>搜尋 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-TW">React Developer Tools</a> 並下載。</li><li>點擊瀏覽器右上方的 Google 擴充功能，把開發者工具釘選上去。<br> <img src="https://i.imgur.com/3Uz8xcM.png" alt="Google 擴充功能"></li><li>開發者工具會有三種顏色呈現方式<table><thead><tr><th align="center">圖案</th><th align="center">解說</th></tr></thead><tbody><tr><td align="center"><img src="https://i.imgur.com/IlEAqv5.png" alt="Unused React"></td><td align="center">灰色，表示當前網頁不是用 React 開發的</td></tr><tr><td align="center"><img src="https://i.imgur.com/H3FqcQp.png" alt="Developer React"></td><td align="center">紅色，表示當前網頁還處於開發者模式，未打包上線</td></tr><tr><td align="center"><img src="https://i.imgur.com/5M7z7Gc.png" alt="Go live"></td><td align="center">藍色，表示當前網頁已打包上線</td></tr></tbody></table></li><li>按 F12 開發者工具內會新增兩個選項<br> <img src="https://i.imgur.com/MemNL3r.png" alt="Tools"><ul><li>Components 用來觀察網頁內有多少個組件組成的。</li><li>Profiler 用來記錄網站的性能。</li></ul></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/components-and-props.html">React 官網 - Components &amp; Props</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 基礎</title>
    <link href="/2021/07/26/2021-7-26-react-base/"/>
    <url>/2021/07/26/2021-7-26-react-base/</url>
    
    <content type="html"><![CDATA[<h1 id="React-基礎"><a href="#React-基礎" class="headerlink" title="React - 基礎"></a>React - 基礎</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>學習 React 中最重要的角色「Babel」，Babel 是 Javascript 的編譯器，有了 Babel 就能更方便順暢的使用 React</p><!-- more --><h2 id="React-基礎環境引入"><a href="#React-基礎環境引入" class="headerlink" title="React - 基礎環境引入"></a>React - 基礎環境引入</h2><ol><li>Babel<ul><li><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><ol><li>瀏覽器不認識 ES6，依靠 Babel 把 ES6 轉成 ES5</li><li>瀏覽器不認識 jsx，依靠 Babel 把 jsx 轉成 js</li><li>可以更流暢的編碼</li></ol></li><li>React 核心庫<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react@17/umd/react.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>React 擴展庫（讓 React 幫你操作 DOM）<ul><li><code>&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ol><h2 id="React-起手式"><a href="#React-起手式" class="headerlink" title="React 起手式"></a>React 起手式</h2><ol><li><p>首先建立一個 HTML</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 先準備一個容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入 React 核心庫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 React DOM，用來讓 React 操作 DOM --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 Babel，用來將 jsx 轉成 js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 這裡一定要寫 type=&quot;text/babel&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>並在 script 內編寫虛擬 DOM</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 首先創建虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = &#123;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 2. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/qh3CLyD.png" alt="Hello world"></p></li></ol><h2 id="React-jsx-語法規則-與-必須知道的地方"><a href="#React-jsx-語法規則-與-必須知道的地方" class="headerlink" title="React - jsx 語法規則 與 必須知道的地方"></a>React - jsx 語法規則 與 必須知道的地方</h2><ol><li><p>這時候 HTML 添加樣式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.bg-hexschool</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#69F0AE</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>script 內將內容用變數的方式展現</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1. 宣告變數    </span><br><span class="hljs-keyword">const</span> myId = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-keyword">const</span> myData = <span class="hljs-string">&quot;Hello world&quot;</span><br><br><span class="hljs-comment">// 2. 建創虛擬 DOM</span><br><span class="hljs-keyword">const</span> VDOM = (<br>    <span class="hljs-comment">// 虛擬 DOM 只能有一個根標籤</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    &#123;/* jsx 語法範例如下 */&#125;</span><br><span class="xml">    &#123;/* class 要改成 className */&#125;</span><br><span class="xml">    &#123;/* style 要用 &#123;&#123; key=value &#125;&#125; 包起來，並採用駝峰命名法 */&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">myId</span> &#125; </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-hexschool&quot;</span> </span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="xml">            &#123;/* JS 表達式都要用 &#123;&#125; 包起來，包含註解 */&#125;</span><br><span class="xml">            &#123; myData &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>虛擬 DOM 只能用一個標籤包起來<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        &#123;/* 標籤需要閉合，例如最後面加 &quot;/&quot; */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     <span class="hljs-comment">// &lt;p&gt;這個沒有被包起來，會報錯&lt;/p&gt;</span><br>)<br><span class="hljs-comment">// 3. 渲染虛擬 DOM 到頁面</span><br>ReactDOM.render( VDOM, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>) )<br></code></pre></td></tr></table></figure></li><li><p>畫面呈現<br> <img src="https://i.imgur.com/1lrecAZ.png" alt="jsx 運用"></p></li></ol><h3 id="總結-jsx-語法規則"><a href="#總結-jsx-語法規則" class="headerlink" title="總結 jsx 語法規則"></a>總結 jsx 語法規則</h3><ol><li>定義虛擬 DOM 時，不要寫<strong>引號</strong>。</li><li>標籤中混入 JS 表達式要用 <code>&#123;&#125;</code> 包起來。</li><li>樣式的類名指定不要用 <code>class</code>，要用 <code>className</code>。</li><li>內聯樣式，要用 <code>style=&#123;&#123; key=value &#125;&#125;</code>的形式去寫。<ol><li>key 如果像是 <code>font-size</code>，要改成<strong>駝峰命名</strong> <code>fontSize</code>。</li><li>value 需要用<strong>引號</strong>包起來。</li></ol></li><li>虛擬 DOM 必須只有<strong>一個根標籤</strong></li><li>標籤必須<strong>閉合</strong></li><li>標籤首字母<ol><li>如果小寫開頭，則將把標籤轉為 HTML 中同名元素，如果 HTML 中無該標籤同名元素，則報錯。</li><li>如果大寫開頭，React 就去渲染對應的組件，如果組件沒有定義，則報錯</li></ol></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://zh-hant.reactjs.org/docs/cdn-links.html">React 官網 - CDN 連結</a></li><li><a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html">React 官網 - JSX 介紹</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - 簡介</title>
    <link href="/2021/07/26/2021-7-26-react-introduction/"/>
    <url>/2021/07/26/2021-7-26-react-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="React-簡介"><a href="#React-簡介" class="headerlink" title="React - 簡介"></a>React - 簡介</h1><p><img src="https://i.postimg.cc/kMk16Gqq/icons8-react-160.png" alt="從 0 開始學 React"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這裡將會記錄我學習 React 的筆記，雖然說是從 0 開始學習，但該有的 Javascript 知識還是要有。</p><!-- more --><h3 id="學習-React-所需要的-Javascript-知識"><a href="#學習-React-所需要的-Javascript-知識" class="headerlink" title="學習 React 所需要的 Javascript 知識"></a>學習 React 所需要的 Javascript 知識</h3><ul><li><input checked="" disabled="" type="checkbox"> 判斷 this 指向</li><li><input checked="" disabled="" type="checkbox"> class 的概念</li><li><input checked="" disabled="" type="checkbox"> Javascript ES6 的語法規範</li><li><input checked="" disabled="" type="checkbox"> npm 套件管理工具</li><li><input checked="" disabled="" type="checkbox"> 繼承與原型鏈</li><li><input checked="" disabled="" type="checkbox"> 數列常用方法</li><li><input checked="" disabled="" type="checkbox"> 模組化</li></ul><h2 id="React-是什麼"><a href="#React-是什麼" class="headerlink" title="React 是什麼 ?"></a>React 是什麼 ?</h2><ul><li>React 是一個實作使用者介面的 JavaScript 函式庫。</li></ul><h2 id="誰開發的"><a href="#誰開發的" class="headerlink" title="誰開發的 ?"></a>誰開發的 ?</h2><ul><li>由 Facebook 開發，並且開源。</li></ul><h2 id="為什麼要學"><a href="#為什麼要學" class="headerlink" title="為什麼要學 ?"></a>為什麼要學 ?</h2><ol><li><p>原生 Javascript 操作 DOM 繁瑣，效率<strong>低</strong> ( DOM-API 操作 UI )。</p></li><li><p>使用 Javascript 直接操作 DOM，瀏覽器會<strong>大量重新</strong>繪製畫面。</p><p> <img src="https://i.imgur.com/MAar8Vs.png" alt="原生 JS 渲染畫面流程，每次新增資料，都會重新渲染畫面"></p></li><li><p>原生 Javascript 沒有<strong>組件化</strong>程式碼功能，程式碼重複利用率低。</p></li></ol><h2 id="React-的優點"><a href="#React-的優點" class="headerlink" title="React 的優點"></a>React 的優點</h2><ol><li><p>採用<strong>組件化</strong>模式，<strong>聲明式編碼</strong>，提高開發效率及組件複用率。</p><ul><li>聲明式編碼 與 命令式編碼 的差別<ul><li>命令式編碼: 透過 Javascript 或 JQuery 拿到要操作的 DOM，並命令它改樣式。<br>  生活中的例子：<blockquote><p>老師口渴想喝水，命令同學去哪個地方裝水。<br>這就是命令式編碼，其中少做任何步驟，老師都會喝不到水</p></blockquote></li><li>聲明式編碼: 透過一些特殊的語法，表達它是甚麼樣式，然後 React 自動幫你改了。<br>  生活中的例子：<blockquote><p>老師說喉嚨有點乾，同學自動站起來遞水過來。<br>這就是聲明式編碼</p></blockquote></li></ul></li></ul></li><li><p>React Native 中可以使用 React 語法進行<strong>移動端開發</strong>。</p></li><li><p>使用<strong>虛擬 DOM</strong> + 優秀的 <strong>Diffing 算法</strong>，盡量減少與真實 DOM 的直接作用。</p><p> <img src="https://i.imgur.com/3ibcbkp.png" alt="React 渲染畫面流程，每次新增資料，都會比對虛擬 DOM，不一樣的 DOM 才渲染上去"></p></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.youtube.com/playlist?list=PLmOn9nNkQxJFJXLvkNsGsoCUxJLqyLGxu">React 全家桶</a></li><li><a href="https://reactjs.org/">React 官網</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
